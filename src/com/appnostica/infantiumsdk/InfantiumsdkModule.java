/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2013 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package com.appnostica.infantiumsdk;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import org.appcelerator.kroll.KrollFunction;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;

import org.appcelerator.titanium.TiApplication;
import org.appcelerator.kroll.common.Log;

import android.app.Activity;

import com.infantium.android.sdk.Element;
//import com.infantium.android.sdk.InfantiumAsyncResponseHandler;
import com.infantium.android.sdk.InfantiumResponse;
import com.infantium.android.sdk.Infantium_SDK;
import com.infantium.android.sdk.Player;
import com.infantium.android.sdk.Target;
//import com.infantium.android.sdk.constants.Dbg;

@Kroll.module(name="Infantiumsdk", id="com.appnostica.infantiumsdk")
public class InfantiumsdkModule extends KrollModule
{
	private static Infantium_SDK infantium = null;

	// Standard Debugging variables
	private static final String LOG_TAG = "InfantiumsdkModule";

	// You can define constants with @Kroll.constant, for example:
	// @Kroll.constant public static final String EXTERNAL_NAME = value;
	
	public InfantiumsdkModule()
	{
		super();
	}

	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app)
	{
		Log.d(LOG_TAG, "inside onAppCreate");
		
		// put module init code that needs to run when the application is created
		
		infantium = Infantium_SDK.getInfantium_SDK(app);
	}
	
	@Kroll.method
	public void pause() {
        Log.d(LOG_TAG, "--- Paused MainActivity --- ");
        infantium.onPauseInfantium();
    }

	@Kroll.method
    public void resume() {
        Log.d(LOG_TAG, "--- Resumed MainActivity ---");
        infantium.onResumeInfantium();
    }
    

	//
	// INFANTIUM_SDK
	//
	
	//InfantiumResponse	addDynamicField(DynamicField d_field)
	//Add new DynamicField to the dynamic field List.
	//InfantiumResponse	addDynamicFields(List<DynamicField> d_fields)
	//Add a List of DynamicFields that will appear in the Gameplay.
	
	// Add new Element to the element List.
	@Kroll.method
	public void addElement(Object element) {
		HashMap<String, Object> el = (HashMap<String, Object>)element;
		Object[] s = (Object[]) el.get("size");
		ArrayList<Integer> size = new ArrayList<Integer>();
		size.add((Integer) s[0]);
		size.add((Integer) s[1]);
		Object[] p = (Object[]) el.get("pos");
		ArrayList<Integer> pos = new ArrayList<Integer>();
		pos.add((Integer) p[0]);
		pos.add((Integer) p[1]);
		Element new_elem = new Element(
			(String)el.get("id"),
			(String)el.get("type"),
			(String)el.get("visual_type"),
			size,
			(String)el.get("color"),
			(String)el.get("category"),
			(String)el.get("subcategory"),
			pos,
			1
		);
		infantium.addElement(new_elem);
	}
	
	// Add a List of Elements that will appear in the Gameplay.
	@Kroll.method
	public void addElements(Object[] elements) {
		for (int i=0; i<elements.length; i++) {
			addElement(elements[i]);
		}
	}

	//InfantiumResponse	addFixedAnimation(Animation animation)
	//Add a new Animation using the Animation Class.
	//InfantiumResponse	addFixedAnimations(List<Animation> animations)
	//Add a List of Animations formed by Animation Objects.
	//InfantiumResponse	addSound(Sound sound)
	//Add a sound to the sounds List.
	//InfantiumResponse	addSounds(List<Sound> sounds)
	//Add sounds to the Sounds List that will appear in the next Gameplay.
	
	// End of the gameplay (Ebook or Game).
	@Kroll.method
	public void closeGameplay() {
		infantium.closeGameplay();
	}
	
	// Creates a new Gameplay obtaining the gameplay_id and the gameplay_uuid.
	@Kroll.method
	public void createGameplay() {
		infantium.createGameplay();
	}
	
	// Creates a new Gameplay obtaining the gameplay_id and the gameplay_uuid.
	@Kroll.method
	public void createGameplay(String subcontent_uuid) {
		infantium.createGameplay(subcontent_uuid);
	}

	//InfantiumResponse	endAnimation(String element_id)
	//Ends an existing Animation.
	//InfantiumResponse	endAnimation(String element_id, List<Integer> end_pos)
	//Ends an existing Animation.
	//InfantiumResponse	endAnimation(String element_id, String sound_id)
	//Ends an existing Animation.
	//InfantiumResponse	endAnimation(String element_id, String sound_id, List<Integer> end_pos)
	//Ends an existing Animation.
	
	// End the Dragging.
	@Kroll.method
	public Object finishDragging(Object position, String output) {
		HashMap<String, Integer> p = (HashMap<String, Integer>) position;
		List<Integer> l = new ArrayList<Integer>();
		l.add((Integer)p.get("x2"));
		l.add((Integer)p.get("y2"));
		InfantiumResponse response = infantium.finishDragging(l, output);
		HashMap<String, String> r = new HashMap<String, String>();
		r.put("response", response.toString());
		return (Object)r;
	}
	
	// End the Dragging.
	/*@Kroll.method
	public void finishDragging(Object[] position, String output, int max_x, int max_y) {
		List<Integer> l = new ArrayList<Integer>();
		for (int i=0; i<position.length; i++) {
			l.add((Integer)position[i]);
		}
		infantium.finishDragging(l, output, max_x, max_y);
	}
	
	// End the Dragging.
	@Kroll.method
	public void finishDragging(Object[] position, String output, String sound_id) {
		List<Integer> l = new ArrayList<Integer>();
		for (int i=0; i<position.length; i++) {
			l.add((Integer)position[i]);
		}
		infantium.finishDragging(l, output, sound_id);
	}
	
	// End the Dragging.
	@Kroll.method
	public void finishDragging(Object[] position, String output, String sound_id, int max_x, int max_y) {
		List<Integer> l = new ArrayList<Integer>();
		for (int i=0; i<position.length; i++) {
			l.add((Integer)position[i]);
		}
		infantium.finishDragging(l, output, sound_id, max_x, max_y);
	}*/
	
	// Returns the local list of Players.
	@Kroll.method
	public Object[] getPlayerList() {
		List<Player> l = infantium.getPlayerList();
		int size = l.size();
		Object[] o = new Object[size];
		for (int i=0; i<size; i++) {
			o[i] = l.get(i);
		}
		return o;
	}
	
	// Returns the user interaction to the Infantium App
	@Kroll.method
	public void getPlayerUUIDFromApp() {
		infantium.getPlayerUUIDFromApp();
	}
	
	// Returns information about the selected player.
	@Kroll.method
	public Object getSelectedPlayer() {
		HashMap<String, Object> map = null;
		try {
			map = new HashMap<String, Object>();
			Player p = infantium.getSelectedPlayer();
			if (p != null) {
				map.put("uuid", p.getUUID());
				map.put("nickname", p.getNickname());
				map.put("months", p.getMonths());
			}
		} catch (java.lang.NullPointerException e) {}
		return map;
	}
	
	// Log in function.
	@Kroll.method
	public void login(String username, String password) {
		infantium.login(username, password);
	}
	
	// Log out function.
	@Kroll.method
	public void logout() {
		infantium.logout();
	}
	
	// Creates a new Anonymous Player and a temporary tutor.
	@Kroll.method
	public void newAnonymousPlayer(String nickname, int months) {
		infantium.newAnonymousPlayer(nickname, months);
	}
	
	// Creates a new Anonymous Player and a temporary tutor.
	/*@Kroll.method
	public void newAnonymousPlayer(String nickname, int months, String sex) {
		infantium.newAnonymousPlayer(nickname, months, sex);
	}*/
	
	// Creates a new Player from the actual tutor and refresh the player list.
	@Kroll.method
	public void newPlayer(String nickname, int months) {
		infantium.newPlayer(nickname, months);
	}
	
	// Creates a new Player from the actual tutor and refresh the player list.
	@Kroll.method
	public void newPlayer(String nickname, int months, String sex) {
		infantium.newPlayer(nickname, months, sex);
	}
	
	// Refresh the player list and returns an Array of Players.
	@Kroll.method
	public void refreshPlayerList() {
		infantium.refreshPlayerList();
	}
	
	// Restarts the rawdata values
	@Kroll.method
	public void restartRawdata() {
		infantium.restartRawdata();
	}
	
	//Returns the user interaction to the Infantium App
	@Kroll.method
	public void returnToInfantiumApp() {
		TiApplication appContext = TiApplication.getInstance();
		Activity activity = appContext.getCurrentActivity();
		infantium.returnToInfantiumApp(activity);
	}
	
	
	// Check if the selected player is in the player list.
	@Kroll.method
	public void selectPlayer(String player_uuid) {
		infantium.selectPlayer(player_uuid);
	}
	
	// Send the EBook Rawdata.
	@Kroll.method
	public void sendEbookRawData(int numPage, boolean text, boolean readToMe) {
		infantium.sendEbookRawData(numPage, text, readToMe);
	}
	
	// Send the Game Rawdata.
	@Kroll.method
	public void sendGameRawData() {
		infantium.sendGameRawData();
	}
	
	// Set the content UUID of the Video.
	@Kroll.method
	public void sendVideoRawdata(int view_time, int pause, int rewind, int forward, int replay) {
		infantium.sendVideoRawdata(view_time, pause, rewind, forward, replay);
	}
	
	// Set Contentapp_uuid from the game or ebook.
	@Kroll.method
	public void setContentAppUUID(String contentapp_uuid) {
		infantium.setContentAppUUID(contentapp_uuid);
	}
	
	// Set the content_uuid from the video or ebook.
	@Kroll.method
	public void setContentUUID(String content_uuid) {
		infantium.setContentUUID(content_uuid);
	}
	
	// Set the developer's credentials in order to contact with the API.
	@Kroll.method
	public void setDeveloperCredentials(String api_user, String api_key) {
		infantium.setDeveloperCredentials(api_user, api_key);
	}
	
	// In this function the developer defines a InfantiumAsyncResponseHandler where all the asyncronous communications will be received.
	@Kroll.method
	public void setDeveloperHandler(Object handler) {
		infantium.setDeveloperHandler( new InfantiumHandler(
			(HashMap<String, KrollFunction>)handler, 
			getKrollObject()
		));
	}
	
	// Set the device dimensions in pixels
	@Kroll.method
	public void setDeviceInfo(int w, int h) {
		infantium.setDeviceInfo(w, h);
	}
	
	// Set a list of elements where each element is an element required for the solution.
	@Kroll.method
	public void setEvaluate(String[] eval) {
		/*if (e != null) {
			List<String> l = new ArrayList<String>();
			Object[] eval = 
			for (int i=0; i<eval.length; i++) {
				Object id = eval[i];
				l.add((String)id);
			}
			infantium.setEvaluate(l);
		}*/
		
		List<String> l = new ArrayList<String>();
		for (int i=0; i<eval.length; i++) {
			l.add(eval[i]);
		}
		infantium.setEvaluate(l);
		
	}
	
	// Set the number of failures the player has done during the gameplay.
	@Kroll.method
	public void setFailures(int fails) {
		infantium.setFailures(fails);
	}
	
	// Obtain the information from the player and his related tutor.
	@Kroll.method
	public void setPlayerUUID(String player_uuid) {
		infantium.setPlayerUUID(player_uuid);
	}
	
	// Set the number of successes the player has done in the gameplay.
	@Kroll.method
	public void setSuccesses(int successes) {
		infantium.setSuccesses(successes);
	}
	
	// Set a Target of the game.
	@Kroll.method
	public void setTarget(Object target) {
		HashMap<String, String> t = (HashMap<String, String>) target; 
		infantium.setTarget(new Target(
			t.get("element_id"),
			t.get("goal")
		));
	}
	
	// Set the Targets of the game.
	@Kroll.method
	public void setTargets(Object[] elements) {
		List<Target> l = new ArrayList<Target>();
		for (int i=0; i<elements.length; i++) {
			HashMap<String, String> t = (HashMap<String, String>) elements[i];
			Target target = new Target(
				t.get("element_id"),
				t.get("goal")
			);
			l.add(target);
		}
		infantium.setTargets(l);
	}
	
	//InfantiumResponse	startAnimation(String element_id, List<Integer> st_pos, String type)
	//Start a new Animation.
	
	// Starts a Dragging action.
	@Kroll.method
	public Object startDragging(String element_id, Object position) {
		HashMap<String, Integer> p = (HashMap<String, Integer>) position;
		List<Integer> l = new ArrayList<Integer>();
		l.add((Integer)p.get("x1"));
		l.add((Integer)p.get("y1"));
		InfantiumResponse response = infantium.startDragging(element_id, l);
		HashMap<String, String> r = new HashMap<String, String>();
		r.put("response", response.toString());
		return (Object)r;
	}
	
	// Reestarts the Rawdata timestamp.
	@Kroll.method
	public void startPlaying() {
		infantium.startPlaying();
	}
	
	// Called when there is a tap on the screen but not on an existing element.
	@Kroll.method
	public void tapNoObjects(Object[] position, String output) {
		List<Integer> l = new ArrayList<Integer>();
		for (int i=0; i<position.length; i++) {
			l.add((Integer)position[i]);
		}
		infantium.tapNoObjects(l, output);
	}
	
	// Called when there is a tap on the screen but not on an existing element.
	//@Kroll.method
	//public void tapNoObjects(Object[] position, String output, String sound_id) {
	//	List<Integer> l = new ArrayList<Integer>();
	//	for (int i=0; i<position.length; i++) {
	//		l.add((Integer)position[i]);
	//	}
	//	infantium.tapNoObjects(l, output, sound_id);
	//}
	
	// Relates a tap on the screen to a particular element.
	@Kroll.method
	public void tapOnObjects(String element_id, String output) {
		infantium.tapOnObjects(element_id, output);
	}
	
	// InfantiumResponse	tapOnObjects(String element_id, String output, List<DynamicField> extra_fields)
	// Relates a tap on the screen to a particular element with sound.
	
	// Relates a tap on the screen to a particular element with sound.
	//@Kroll.method
	//public void tapOnObjects(String element_id, String output, String sound_id) {
	//	infantium.tapOnObjects(element_id, output, sound_id);
	//}
	
	// InfantiumResponse	tapOnObjects(String element_id, String output, String sound_id, List<DynamicField> extra_fields)
	// Relates a tap on the screen to a particular element with sound.

}

